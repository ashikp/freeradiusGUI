<?php

namespace App\Services;

use App\Models\RadiusClient;
use App\Models\UserGroup;
use App\Models\AuthenticationMethod;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Process;
use Illuminate\Support\Facades\Log;

class FreeRadiusService
{
    protected $configPath;
    protected $clientsPath;
    protected $usersPath;

    public function __construct()
    {
        $this->configPath = config('freeradius.config_path', '/etc/freeradius/3.0');
        $this->clientsPath = $this->configPath . '/clients.conf';
        $this->usersPath = $this->configPath . '/users';
    }

    /**
     * Get FreeRADIUS service status
     */
    public function getStatus(): array
    {
        $result = Process::run('systemctl status freeradius');
        return [
            'running' => $result->successful(),
            'output' => $result->output()
        ];
    }

    /**
     * Start FreeRADIUS service
     */
    public function start(): bool
    {
        $result = Process::run('sudo systemctl start freeradius');
        return $result->successful();
    }

    /**
     * Stop FreeRADIUS service
     */
    public function stop(): bool
    {
        $result = Process::run('sudo systemctl stop freeradius');
        return $result->successful();
    }

    /**
     * Restart FreeRADIUS service
     */
    public function restart(): bool
    {
        $result = Process::run('sudo systemctl restart freeradius');
        return $result->successful();
    }

    /**
     * Update clients.conf with current clients from database
     */
    public function updateClientsConfig(): bool
    {
        try {
            $clients = RadiusClient::where('is_active', true)->get();
            $config = "# Generated by FreeRADIUS GUI\n\n";

            foreach ($clients as $client) {
                $config .= "client {$client->name} {\n";
                $config .= "    ipaddr = {$client->ip_address}\n";
                $config .= "    secret = {$client->secret}\n";
                if ($client->shortname) {
                    $config .= "    shortname = {$client->shortname}\n";
                }
                if ($client->nas_type) {
                    $config .= "    nas_type = {$client->nas_type}\n";
                }
                if ($client->comment) {
                    $config .= "    # {$client->comment}\n";
                }
                $config .= "}\n\n";
            }

            // Log the configuration path
            Log::info('Attempting to write FreeRADIUS clients configuration', [
                'path' => $this->clientsPath,
                'client_count' => $clients->count()
            ]);

            // Check if directory exists
            if (!File::exists(dirname($this->clientsPath))) {
                Log::error('FreeRADIUS configuration directory does not exist', [
                    'path' => dirname($this->clientsPath)
                ]);
                return false;
            }

            // Try to write the configuration
            if (!File::put($this->clientsPath, $config)) {
                Log::error('Failed to write FreeRADIUS clients configuration', [
                    'path' => $this->clientsPath
                ]);
                return false;
            }

            // Test the configuration
            $testResult = $this->testConfig();
            if (!$testResult['success']) {
                Log::error('FreeRADIUS configuration test failed', [
                    'output' => $testResult['output']
                ]);
                return false;
            }

            Log::info('Successfully updated FreeRADIUS clients configuration');
            return true;
        } catch (\Exception $e) {
            Log::error('Error updating FreeRADIUS clients configuration', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return false;
        }
    }

    /**
     * Test FreeRADIUS configuration
     */
    public function testConfig(): array
    {
        $result = Process::run('sudo freeradius -C');
        return [
            'success' => $result->successful(),
            'output' => $result->output()
        ];
    }

    /**
     * Get FreeRADIUS logs
     */
    public function getLogs(int $lines = 100): string
    {
        $result = Process::run("sudo tail -n {$lines} /var/log/freeradius/radius.log");
        return $result->output();
    }

    public function updateDatabaseConfig($setting)
    {
        $configPath = config('freeradius.config_path');
        $sqlConfigPath = $configPath . '/mods-config/sql/main';

        // Create the SQL configuration directory if it doesn't exist
        if (!file_exists($sqlConfigPath)) {
            mkdir($sqlConfigPath, 0755, true);
        }

        // Generate the SQL configuration based on the driver
        $config = $this->generateSqlConfig($setting);

        // Write the configuration to the file
        file_put_contents($sqlConfigPath . '/sql.conf', $config);

        // Update the mods-enabled/sql file to point to the new configuration
        $modsEnabledPath = $configPath . '/mods-enabled/sql';
        if (!file_exists($modsEnabledPath)) {
            symlink($configPath . '/mods-available/sql', $modsEnabledPath);
        }

        // Test the configuration
        $this->testConfig();
    }

    protected function generateSqlConfig($setting)
    {
        $config = "sql {\n";
        $config .= "    driver = \"{$setting->driver}\"\n";

        if ($setting->driver !== 'sqlite') {
            $config .= "    server = \"{$setting->host}\"\n";
            $config .= "    port = {$setting->port}\n";
            $config .= "    login = \"{$setting->username}\"\n";
            $config .= "    password = \"{$setting->password}\"\n";
            $config .= "    radius_db = \"{$setting->database}\"\n";
        } else {
            $config .= "    radius_db = \"" . storage_path('app/freeradius/radius.db') . "\"\n";
        }

        $config .= "    read_groups = yes\n";
        $config .= "    delete_stale_sessions = yes\n";
        $config .= "    pool {\n";
        $config .= "        start = 5\n";
        $config .= "        min = 4\n";
        $config .= "        max = 10\n";
        $config .= "        spare = 3\n";
        $config .= "        uses = 0\n";
        $config .= "        retry_delay = 30\n";
        $config .= "        lifetime = 0\n";
        $config .= "        idle_timeout = 60\n";
        $config .= "    }\n";
        $config .= "}\n";

        return $config;
    }
} 