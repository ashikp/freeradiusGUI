<?php

namespace App\Services;

use App\Models\RadiusClient;
use App\Models\UserGroup;
use App\Models\AuthenticationMethod;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Process;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

class FreeRadiusService
{
    protected $configPath;
    protected $clientsPath;
    protected $usersPath;

    public function __construct()
    {
        $this->configPath = config('freeradius.config_path', '/etc/freeradius/3.0');
        $this->clientsPath = $this->configPath . '/clients.conf';
        $this->usersPath = $this->configPath . '/users';
    }

    /**
     * Ensure configuration directory exists
     */
    protected function ensureConfigDirectoryExists(): bool
    {
        try {
            if (!File::exists($this->configPath)) {
                Log::info('Creating FreeRADIUS configuration directory', [
                    'path' => $this->configPath
                ]);
                File::makeDirectory($this->configPath, 0755, true);
            }
            return true;
        } catch (\Exception $e) {
            Log::error('Failed to create FreeRADIUS configuration directory', [
                'path' => $this->configPath,
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }

    /**
     * Get FreeRADIUS service status
     */
    public function getStatus(): array
    {
        $result = Process::run('systemctl status freeradius');
        return [
            'running' => $result->successful(),
            'output' => $result->output()
        ];
    }

    /**
     * Start FreeRADIUS service
     */
    public function start(): bool
    {
        $result = Process::run('sudo systemctl start freeradius');
        return $result->successful();
    }

    /**
     * Stop FreeRADIUS service
     */
    public function stop(): bool
    {
        $result = Process::run('sudo systemctl stop freeradius');
        return $result->successful();
    }

    /**
     * Restart FreeRADIUS service
     */
    public function restart(): bool
    {
        $result = Process::run('sudo systemctl restart freeradius');
        return $result->successful();
    }

    /**
     * Update clients.conf with current clients from database
     */
    public function updateClientsConfig(): bool
    {
        try {
            // Ensure configuration directory exists
            if (!$this->ensureConfigDirectoryExists()) {
                return false;
            }

            $clients = RadiusClient::where('is_active', true)->get();
            $config = "# Generated by FreeRADIUS GUI\n\n";

            foreach ($clients as $client) {
                $config .= "client {$client->name} {\n";
                $config .= "    ipaddr = {$client->ip_address}\n";
                $config .= "    secret = {$client->secret}\n";
                if ($client->shortname) {
                    $config .= "    shortname = {$client->shortname}\n";
                }
                if ($client->nas_type) {
                    $config .= "    nas_type = {$client->nas_type}\n";
                }
                if ($client->comment) {
                    $config .= "    # {$client->comment}\n";
                }
                $config .= "}\n\n";
            }

            // Log the configuration path
            Log::info('Attempting to write FreeRADIUS clients configuration', [
                'path' => $this->clientsPath,
                'client_count' => $clients->count()
            ]);

            // Try to write the configuration
            if (!File::put($this->clientsPath, $config)) {
                Log::error('Failed to write FreeRADIUS clients configuration', [
                    'path' => $this->clientsPath
                ]);
                return false;
            }

            // Test the configuration
            $testResult = $this->testConfig();
            if (!$testResult['success']) {
                Log::error('FreeRADIUS configuration test failed', [
                    'output' => $testResult['output']
                ]);
                return false;
            }

            Log::info('Successfully updated FreeRADIUS clients configuration');
            return true;
        } catch (\Exception $e) {
            Log::error('Error updating FreeRADIUS clients configuration', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return false;
        }
    }

    /**
     * Test FreeRADIUS configuration
     */
    public function testConfig(): array
    {
        $result = Process::run('sudo freeradius -C');
        return [
            'success' => $result->successful(),
            'output' => $result->output()
        ];
    }

    /**
     * Get FreeRADIUS logs
     */
    public function getLogs(int $lines = 100): string
    {
        $result = Process::run("sudo tail -n {$lines} /var/log/freeradius/radius.log");
        return $result->output();
    }

    /**
     * Update database configuration and import schema
     */
    public function updateDatabaseConfig($setting)
    {
        try {
            $configPath = config('freeradius.config_path');
            $sqlConfigPath = $configPath . '/mods-config/sql/main';

            // Create the SQL configuration directory if it doesn't exist
            if (!file_exists($sqlConfigPath)) {
                mkdir($sqlConfigPath, 0755, true);
            }

            // Generate the SQL configuration based on the driver
            $config = $this->generateSqlConfig($setting);

            // Write the configuration to the file
            file_put_contents($sqlConfigPath . '/sql.conf', $config);

            // Update the mods-enabled/sql file to point to the new configuration
            $modsEnabledPath = $configPath . '/mods-enabled/sql';
            if (!file_exists($modsEnabledPath)) {
                symlink($configPath . '/mods-available/sql', $modsEnabledPath);
            }

            // Update sites-enabled/default and inner-tunnel
            $this->updateSitesConfig($setting);

            // Import the database schema
            $this->importDatabaseSchema($setting);

            // Test the configuration
            $testResult = $this->testConfig();
            if (!$testResult['success']) {
                Log::error('FreeRADIUS configuration test failed after database update', [
                    'output' => $testResult['output']
                ]);
                return false;
            }

            // Restart FreeRADIUS to apply changes
            $this->restart();

            return true;
        } catch (\Exception $e) {
            Log::error('Error updating database configuration', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return false;
        }
    }

    /**
     * Generate SQL configuration
     */
    protected function generateSqlConfig($setting)
    {
        $config = "sql {\n";
        $config .= "    driver = \"{$setting->driver}\"\n";

        if ($setting->driver !== 'sqlite') {
            $config .= "    server = \"{$setting->host}\"\n";
            $config .= "    port = {$setting->port}\n";
            $config .= "    login = \"{$setting->username}\"\n";
            $config .= "    password = \"{$setting->password}\"\n";
            $config .= "    radius_db = \"{$setting->database}\"\n";
        } else {
            $config .= "    radius_db = \"" . storage_path('app/freeradius/radius.db') . "\"\n";
        }

        $config .= "    read_groups = yes\n";
        $config .= "    delete_stale_sessions = yes\n";
        $config .= "    pool {\n";
        $config .= "        start = 5\n";
        $config .= "        min = 4\n";
        $config .= "        max = 10\n";
        $config .= "        spare = 3\n";
        $config .= "        uses = 0\n";
        $config .= "        retry_delay = 30\n";
        $config .= "        lifetime = 0\n";
        $config .= "        idle_timeout = 60\n";
        $config .= "    }\n";
        $config .= "}\n";

        return $config;
    }

    /**
     * Update sites configuration
     */
    protected function updateSitesConfig($setting)
    {
        $configPath = config('freeradius.config_path');
        
        // Update default site
        $defaultConfig = $this->generateDefaultSiteConfig($setting);
        file_put_contents($configPath . '/sites-enabled/default', $defaultConfig);

        // Update inner-tunnel site
        $innerTunnelConfig = $this->generateInnerTunnelConfig($setting);
        file_put_contents($configPath . '/sites-enabled/inner-tunnel', $innerTunnelConfig);
    }

    /**
     * Generate default site configuration
     */
    protected function generateDefaultSiteConfig($setting)
    {
        $config = "# Generated by FreeRADIUS GUI\n\n";
        $config .= "authorize {\n";
        $config .= "    sql\n";
        $config .= "    pap\n";
        $config .= "    chap\n";
        $config .= "    mschap\n";
        $config .= "    eap\n";
        $config .= "}\n\n";

        $config .= "authenticate {\n";
        $config .= "    Auth-Type PAP {\n";
        $config .= "        pap\n";
        $config .= "    }\n";
        $config .= "    Auth-Type CHAP {\n";
        $config .= "        chap\n";
        $config .= "    }\n";
        $config .= "    Auth-Type MS-CHAP {\n";
        $config .= "        mschap\n";
        $config .= "    }\n";
        $config .= "    Auth-Type EAP {\n";
        $config .= "        eap\n";
        $config .= "    }\n";
        $config .= "}\n\n";

        $config .= "accounting {\n";
        $config .= "    sql\n";
        $config .= "}\n\n";

        $config .= "session {\n";
        $config .= "    sql\n";
        $config .= "}\n\n";

        $config .= "post-auth {\n";
        $config .= "    sql\n";
        $config .= "    exec\n";
        $config .= "    remove_reply_message_if_eap\n";
        $config .= "}\n";

        return $config;
    }

    /**
     * Generate inner-tunnel configuration
     */
    protected function generateInnerTunnelConfig($setting)
    {
        $config = "# Generated by FreeRADIUS GUI\n\n";
        $config .= "authorize {\n";
        $config .= "    sql\n";
        $config .= "    pap\n";
        $config .= "    chap\n";
        $config .= "    mschap\n";
        $config .= "    eap\n";
        $config .= "}\n\n";

        $config .= "authenticate {\n";
        $config .= "    Auth-Type PAP {\n";
        $config .= "        pap\n";
        $config .= "    }\n";
        $config .= "    Auth-Type CHAP {\n";
        $config .= "        chap\n";
        $config .= "    }\n";
        $config .= "    Auth-Type MS-CHAP {\n";
        $config .= "        mschap\n";
        $config .= "    }\n";
        $config .= "    Auth-Type EAP {\n";
        $config .= "        eap\n";
        $config .= "    }\n";
        $config .= "}\n\n";

        $config .= "session {\n";
        $config .= "    sql\n";
        $config .= "}\n\n";

        $config .= "post-auth {\n";
        $config .= "    sql\n";
        $config .= "    exec\n";
        $config .= "    remove_reply_message_if_eap\n";
        $config .= "}\n";

        return $config;
    }

    /**
     * Import database schema
     */
    protected function importDatabaseSchema($setting)
    {
        try {
            if ($setting->driver === 'sqlite') {
                $dbPath = storage_path('app/freeradius/radius.db');
                if (!file_exists(dirname($dbPath))) {
                    mkdir(dirname($dbPath), 0755, true);
                }
                
                // Create SQLite database if it doesn't exist
                if (!file_exists($dbPath)) {
                    touch($dbPath);
                    chmod($dbPath, 0644);
                }

                // Import schema
                $schemaPath = base_path('database/sql/sqlite.sql');
                if (file_exists($schemaPath)) {
                    $schema = file_get_contents($schemaPath);
                    DB::unprepared($schema);
                }
            } else {
                // For other databases, use their respective schema files
                $schemaPath = base_path("database/sql/{$setting->driver}.sql");
                if (file_exists($schemaPath)) {
                    $schema = file_get_contents($schemaPath);
                    DB::unprepared($schema);
                }
            }

            return true;
        } catch (\Exception $e) {
            Log::error('Error importing database schema', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return false;
        }
    }
} 